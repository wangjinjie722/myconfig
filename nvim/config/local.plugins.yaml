- repo: ntpeters/vim-better-whitespace
- repo: terryma/vim-multiple-cursors
- repo: tpope/vim-repeat
- repo: jszakmeister/vim-togglecursor
- repo: mhinz/vim-startify
- repo: rykka/riv.vim
- repo: tpope/vim-abolish
- repo: tpope/vim-projectionist
- repo: vim-scripts/BufOnly.vim
- repo: godlygeek/tabular
# - repo: kien/rainbow_parentheses.vim
- repo: haya14busa/incsearch.vim
- repo: haya14busa/incsearch-fuzzy.vim
- repo: vim-airline/vim-airline
- repo: vim-airline/vim-airline-themes
- repo: tpope/vim-surround
- repo: junegunn/vim-easy-align
- repo: Valloric/MatchTagAlways

- repo: Yggdroot/indentLine
  hook_add: |
    let g:indentLine_bufNameExclude = ['NERD_tree.*', 'defx', 'startify', '__vista__']
    let g:indentLine_fileTypeExclude = ['defx', '__vista__', 'help', 'clap_input', 'tagbar', 'vista_kind']

- repo: neoclide/coc.nvim
  merge: 0
  rev: release
  hook_add: source $VIM_PATH/config/plugins/coc.vim

# tencent jce file
- { repo: tenfyzhong/jce-highlight, on_ft: jce}

# pip install https://github.com/Rykka/instant-rst.py/archive/master.zip
- { repo: Rykka/InstantRst, on_ft: rst}
- { repo: PegasusWang/RST-Tables, on_ft: rst}
- { repo: iamcco/mathjax-support-for-mkdp, on_ft: markdown}

- repo: iamcco/markdown-preview.nvim
  on_ft: [ markdown, pandoc.markdown, rmd ]
  build: cd app & npm install
  hook_source: |
    let g:mkdp_auto_close = 0

# Python related, NOTE python-mode use submodule
# cd ~/.cache/vim/dein/repos/github.com; mkdir python-mode
# git clone --recurse-submodules https://github.com/python-mode/python-mode
- { repo: python-mode/python-mode, on_ft: python}


- repo: easymotion/vim-easymotion
  on_map: { n: <Plug> }
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_prompt = 'Jump to → '
    let g:EasyMotion_keys = 'fjdksweoavn'
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1

# enable ycm if you write cpp
# - repo: Valloric/YouCompleteMe
#   build: ./install.py --clang-completer

- repo: dense-analysis/ale
  on_event: FileType
  hook_add: |
    let g:ale_disable_lsp = 0
    let g:ale_echo_delay = 100
    let g:ale_lint_delay = 1000
    let g:ale_echo_msg_format = '%linter%: %code: %%s [%severity%]'
    let g:ale_history_enabled = 0
    let g:ale_sign_error = '✖'
    let g:ale_sign_warning = 'ⁱ'
    let g:ale_maximum_file_size = 500000
    let g:ale_linters = {'go': ['golangci-lint']}

# Golang related
# go get -u github.com/cweill/gotests/...
- repo: buoto/gotests-vim
  on_ft: [ go ]

- repo: fatih/vim-go
  if: has('nvim-0.4.0') || has('patch-8.0.1453')
  on_ft: [ go, gomod, gotexttmpl, gohtmltmpl ]
  hook_add: |-
    let g:go_gopls_enabled = 1
    let g:go_code_completion_enabled = 0
    let g:go_doc_keywordprg_enabled = 0
    let g:go_def_mapping_enabled = 0
    let g:go_jump_to_error = 0
    let g:go_fmt_autosave = 1
    let g:go_fmt_fail_silently = 1
    let g:go_imports_autosave = 1
    let g:go_mod_fmt_autosave = 0
    let g:go_snippet_engine = 'ultisnips'
    let g:go_textobj_enabled = 1
    let g:go_list_height = 10
    let g:go_list_autoclose = 0
    let g:go_fold_enable = []
    let g:go_info_mode = 'gopls'
    let g:go_def_mode = 'gopls'
    let g:go_referrers_mode = 'gopls'
    let g:go_implements_mode = 'guru'
    let g:go_highlight_array_whitespace_error = 0
    let g:go_highlight_chan_whitespace_error = 0
    let g:go_highlight_space_tab_error = 0
    let g:go_highlight_trailing_whitespace_error = 0
    let g:go_highlight_extra_types = 1
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_format_strings = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_function_calls = 1
    let g:go_highlight_function_parameters = 1
    let g:go_highlight_types = 1
    let g:go_highlight_generate_tags = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_string_spellcheck = 0
    let g:go_highlight_variable_declarations = 0
    let g:go_highlight_variable_assignments = 0
    let g:go_fmt_command = "goimports"
    let g:go_def_reuse_buffer = 1
    let g:go_auto_type_info = 1
    if has('nvim') || exists(':terminal')
      let g:go_term_enabled = 1
      let g:go_term_close_on_exit = 0
    endif
